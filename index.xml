<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EagleLand</title>
    <link>https://1000ch.net/</link>
    
    
    
    <updated>2020.07.20</updated>
    
    <item>
      <title>静的ホスティングへのデプロイをGitHub Actionsで実行するようにした</title>
      <link>https://1000ch.net/posts/2020/move-to-github-actions.html</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2020/move-to-github-actions.html</guid>
      <description>

&lt;h1 id=&#34;静的ホスティングへのデプロイをgithub-actionsで実行するようにした&#34;&gt;静的ホスティングへのデプロイをGitHub Actionsで実行するようにした&lt;/h1&gt;

&lt;p&gt;このブログを含めてホストしている Web ページを、&lt;a href=&#34;https://docs.github.com/ja/github/working-with-github-pages/about-github-pages&#34;&gt;GitHub Pages&lt;/a&gt; や &lt;a href=&#34;https://firebase.google.com/docs/hosting?hl=ja&#34;&gt;Firebase Hosting&lt;/a&gt;、&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; など様々な静的ホスティングサービスを使って運用している。これらのサービスへのデプロイは、リポジトリに更新があったときに自動的にデプロイするように設定してある。&lt;/p&gt;

&lt;p&gt;Netlify であれば GitHub リポジトリを連携することで、&lt;code&gt;master&lt;/code&gt; ブランチの変更を自動的に検知し、任意のデプロイ処理を実行できる。Firebase Hosting や GitHub Pages はこうした便利な連携がないので、CI を使って自動デプロイを設定するのが一般的だろう。&lt;/p&gt;

&lt;p&gt;これまでは、CircleCI や Travis CI、Wercker といったような CI サービスを使って GitHub リポジトリを連携し、&lt;code&gt;master&lt;/code&gt; ブランチの変更を検知して、配布されている各種スクリプトを使ってデプロイしてきた。これをすべて GitHub Actions で配布されているデプロイスクリプトに移行した。&lt;/p&gt;

&lt;h2 id=&#34;firebase-hostings-へデプロイする&#34;&gt;Firebase Hostings へデプロイする&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; に記述されているビルドスクリプトでビルドする&lt;/li&gt;
&lt;li&gt;成果物が出力されているフォルダを &lt;a href=&#34;https://github.com/marketplace/actions/github-action-for-firebase&#34;&gt;GitHub Actions for Firebase&lt;/a&gt; でデプロイする&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: deploy
on:
  push:
    branches:
      - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: public
          path: public
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: public
          path: public
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting --project project-name
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hugo-を使ってビルドして-github-pages-へデプロイする&#34;&gt;Hugo を使ってビルドして GitHub Pages へデプロイする&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/hugo-setup&#34;&gt;Hugo setup&lt;/a&gt; を使ってビルドする&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/github-pages-v3&#34;&gt;GitHub Pages v3&lt;/a&gt; を使って &lt;code&gt;gh-pages&lt;/code&gt; ブランチにデプロイする&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: gh-pages
on:
  push:
    branches:
      - master
jobs:
  build-deploy:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;0.64.0&#39;
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Hugo
        run: hugo --minify
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>simplehttp2serverをnpmからインストールできるようにした</title>
      <link>https://1000ch.net/posts/2020/simplehttp2server-cli.html</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2020/simplehttp2server-cli.html</guid>
      <description>

&lt;h1 id=&#34;simplehttp2serverをnpmからインストールできるようにした&#34;&gt;simplehttp2serverをnpmからインストールできるようにした&lt;/h1&gt;

&lt;p&gt;ディレクトリを簡易的にローカル環境でホストする Python 3 系の &lt;a href=&#34;https://docs.python.org/ja/3/library/http.server.html&#34;&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt; という標準ライブラリがある。Python 2 系では &lt;a href=&#34;https://docs.python.org/ja/2.7/library/simplehttpserver.html&#34;&gt;SimpleHTTPServer&lt;/a&gt; として提供されており、ローカル環境で簡易的に Web ページをホストするのに重宝していた。&lt;/p&gt;

&lt;h2 id=&#34;simplehttp2server&#34;&gt;simplehttp2server&lt;/h2&gt;

&lt;p&gt;これは http/1.1 でホストされるが、http/2 でホストしたい人のために &lt;a href=&#34;https://github.com/GoogleChromeLabs/simplehttp2server&#34;&gt;GoogleChromeLabs/simplehttp2server&lt;/a&gt; というものがある。非常に便利なツールだが、Homebrew ないし &lt;code&gt;go get&lt;/code&gt; でインストールする必要がある。これを Web Frontend のプロジェクトでも簡単に使えるようにするために、&lt;code&gt;GoogleChromeLabs/simplehttp2server&lt;/code&gt; の Node.js ラッパーとして開発したのが &lt;a href=&#34;https://github.com/1000ch/simplehttp2server&#34;&gt;&lt;code&gt;1000ch/simplehttp2server&lt;/code&gt;&lt;/a&gt; である。&lt;/p&gt;

&lt;p&gt;と、言っても &lt;code&gt;npm&lt;/code&gt; に &lt;a href=&#34;https://www.npmjs.com/package/simplehttp2server&#34;&gt;&lt;code&gt;simplehttp2server&lt;/code&gt;&lt;/a&gt; を公開したのは5年ほど前で、新しいものではない。最近変更を加えたのは、この Node.js ラッパーとコマンドライン用のパッケージを分割した部分にある。&lt;/p&gt;

&lt;h2 id=&#34;simplehttp2server-cli&#34;&gt;simplehttp2server-cli&lt;/h2&gt;

&lt;p&gt;そのため今は、バイナリをラップした &lt;code&gt;1000ch/simplehttp2server&lt;/code&gt; と &lt;a href=&#34;https://github.com/1000ch/simplehttp2server-cli&#34;&gt;&lt;code&gt;1000ch/simplehttp2server-cli&lt;/code&gt;&lt;/a&gt; がパッケージとして存在する。コマンドラインで &lt;code&gt;simplehttp2server&lt;/code&gt; を実行するためには、後者をインストールする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install simplehttp2server-cli
$ simplehttp2server --help
  -config string
      Config file
  -cors string
      Set allowed origins (default &amp;quot;*&amp;quot;)
  -listen string
      Port to listen on (default &amp;quot;:5000&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;simplehttp2server&lt;/code&gt; は動くようになり、ローカル環境のフォルダ等を http/2 で簡単にホストできる。この場合 http/2 なので https を伴うことになり、デフォルトポートを使う場合は &lt;code&gt;https://localhost:5000&lt;/code&gt; になることに注意して欲しい。&lt;a href=&#34;https://github.com/GoogleChromeLabs/simplehttp2server#that-browser-warning&#34;&gt;そして Google Chrome ではデフォルトで &lt;code&gt;https://localhost&lt;/code&gt; をセキュリティ上の問題で開けない&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;そこで &lt;code&gt;chrome://flags&lt;/code&gt; から &lt;code&gt;#allow-insecure-localhost&lt;/code&gt; フラグを有効化し Google Chrome を再起動すれば &lt;code&gt;https://localhost&lt;/code&gt; も開けるようになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2020年のWeb標準という記事を寄稿しました</title>
      <link>https://1000ch.net/posts/2020/web-standards-prospect.html</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2020/web-standards-prospect.html</guid>
      <description>

&lt;h1 id=&#34;2020年のweb標準という記事を寄稿しました&#34;&gt;2020年のWeb標準という記事を寄稿しました&lt;/h1&gt;

&lt;p&gt;今年も gihyo.jp の新春特別企画ということで &lt;a href=&#34;https://gihyo.jp/design/column/newyear/2020/web-standards-prospect&#34;&gt;2020年のWeb標準&lt;/a&gt; という記事を寄稿しました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;2020 年ということで、Web Packaging と Web Authentication について &lt;a href=&#34;https://twitter.com/hashtag/gihyojp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#gihyojp&lt;/a&gt; に寄稿しました📝🎍 Special thanks to &lt;a href=&#34;https://twitter.com/kinu?ref_src=twsrc%5Etfw&#34;&gt;@kinu&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/agektmr?ref_src=twsrc%5Etfw&#34;&gt;@agektmr&lt;/a&gt; ✨ / &amp;quot;新春特別企画：2020年のWeb標準&amp;quot; &lt;a href=&#34;https://t.co/sVjHoi8zNC&#34;&gt;https://t.co/sVjHoi8zNC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo ( ˘ω˘) (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1213988634623266821?ref_src=twsrc%5Etfw&#34;&gt;January 6, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;取り上げたトピックとしては Web Packaging と Web Authentication ということで、去年や一昨年に比べて少なく感じるかもしれません。が、Web Packaging には Signed HTTP Exchanges と Web Bundles を含んでいますし、Web Authentication もまずまずしっかり説明しており、それぞれの技術が一体どういうものかを掴むには程よい内容になったと思います。&lt;/p&gt;

&lt;p&gt;執筆に際して、技術面を &lt;a href=&#34;https://twitter.com/kinu&#34;&gt;@kinu&lt;/a&gt; さんと &lt;a href=&#34;https://twitter.com/agektmr&#34;&gt;@agektmr&lt;/a&gt; さんにレビューしていただきました。ありがとうございます🙌&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>続・レスポンシブなiframe</title>
      <link>https://1000ch.net/posts/2020/fluid-iframe.html</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2020/fluid-iframe.html</guid>
      <description>

&lt;h1 id=&#34;続-レスポンシブなiframe&#34;&gt;続・レスポンシブなiframe&lt;/h1&gt;

&lt;p&gt;縦横比を維持して親要素いっぱいに広がる &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 要素の実現については、&lt;a href=&#34;https://1000ch.net/posts/2017/responsive-iframe.html&#34;&gt;レスポンシブな iframe&lt;/a&gt; で解決している。このブログでも、YouTube などの動画を埋め込むことがあるので、この方法を使って対処してきたが、いくつか改善したいポイントがあった。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; の親に、特定のクラスを付与した要素を必要とする&lt;/li&gt;
&lt;li&gt;縦横比に応じた &lt;code&gt;padding-top&lt;/code&gt; を用意し、付け替えを必要とする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これを Web Components で実装して解決した。&lt;/p&gt;

&lt;h2 id=&#34;fluid-iframe-要素による単純化&#34;&gt;&lt;code&gt;&amp;lt;fluid-iframe&amp;gt;&lt;/code&gt; 要素による単純化&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.github.io/fluid-iframe/&#34;&gt;&lt;code&gt;&amp;lt;fluid-iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; としてカスタム要素にして汎用化した。&lt;code&gt;npm install fluid-iframe&lt;/code&gt; でもインストールできるが、直接 jsDeliver や unpkg などの CDN からモジュールスクリプトとしてインポートできる。あとは &lt;code&gt;customElements.define()&lt;/code&gt; でカスタム要素として登録し、 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; のように使うだけで良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;fluid-iframe
  src=&amp;quot;https://www.youtube.com/embed/EqNHSrHzSOU&amp;quot;
  title=&amp;quot;Santa Tracker: Out Like A Light&amp;quot;
  aspect=&amp;quot;16/9&amp;quot;&amp;gt;
&amp;lt;/fluid-iframe&amp;gt;

&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;
import FluidIframe from &#39;https://unpkg.com/fluid-iframe&#39;;

customElements.define(&#39;fluid-iframe&#39;, FluidIframe);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;iframe is=&amp;quot;fluid-iframe&amp;quot;&amp;gt;&lt;/code&gt; のように、&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 要素の拡張として &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 要素をフォールバックとして動作させたかったが、要素を親子関係にしないとレスポンシブを実現できないため、断念した。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>英語学習事情</title>
      <link>https://1000ch.net/posts/2019/english.html</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2019/english.html</guid>
      <description>

&lt;h1 id=&#34;英語学習事情&#34;&gt;英語学習事情&lt;/h1&gt;

&lt;p&gt;2019年の8月頃から英語を本格的に勉強している。&lt;a href=&#34;https://eikaiwa.dmm.com/&#34;&gt;DMM 英会話&lt;/a&gt;と &lt;a href=&#34;https://iknow.jp/&#34;&gt;iKnow&lt;/a&gt; を、余程の事情がない限り毎日実施している。&lt;/p&gt;

&lt;h2 id=&#34;dmm-英会話と-iknow&#34;&gt;DMM 英会話と iKnow!&lt;/h2&gt;

&lt;p&gt;DMM 英会話はブラウザ上で講師と 1on1 の英語レッスンを受講できるサービスで、使い始めた頃は Skype が必要だったが今はブラウザのみでビデオチャットができる。日々のトピックは基本的に教材から選んでいて、&lt;a href=&#34;https://eikaiwa.dmm.com/app/daily-news&#34;&gt;デイリーニュース&lt;/a&gt;をやってきた他、最近では&lt;a href=&#34;https://eikaiwa.dmm.com/app/materials/grammar/6r1fXsYHEeimuzOlcF_9gA&#34;&gt;文法&lt;/a&gt;を繰り返し受講している。これは、会社で受けている英語のテストで、文法のクオリティをもっと高められるとの指摘があったためである。&lt;/p&gt;

&lt;p&gt;iKnow! は &lt;a href=&#34;https://prtimes.jp/main/html/rd/p/000000252.000002581.html&#34;&gt;DMM が 2015年に買収した&lt;/a&gt;英語学習サービスである。アプリケーションとしてもなかなか良くできている上に、DMM 英会話との連携も可能で、レッスン中にわからなかった単語等を保存しておき、あとから iKnow! で復習するといったことも可能になっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。単に単語や熟語を出題して消化させるだけでなく、どの程度理解しているかを反応時間や間違えた回数などを元に算出しているようで、曖昧な理解でいるうちはとことん出題してくれて非常に良い。&lt;/p&gt;

&lt;p&gt;iKnow! 単独でも契約して利用可能だが、DMM 英会話を契約すると iKnow! もついてくるので、どう考えても DMM 英会話を契約するのがお得である。DMM 英会話は無料会員登録でも2回までレッスンを受けれるので、まずは雰囲気を掴んでみるのが良いと思う。&lt;a href=&#34;https://eikaiwa.dmm.com/f/810wrq/&#34;&gt;リファラルリンク&lt;/a&gt;から会員登録してもらうと、&lt;a href=&#34;https://eikaiwa.dmm.com/tickets/&#34;&gt;プラスレッスンチケット&lt;/a&gt;が3枚付与されるので、是非どうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ここまでの上達度合いと目標&#34;&gt;ここまでの上達度合いと目標&lt;/h2&gt;

&lt;p&gt;英語に対する慣れは感じるものの、どの程度ボキャブラリーが増えたか・流暢になったか等を図ることは難しいので、わからない。とはいえ、この「慣れ」は重要だと思っていて、母国語ではない言語を話すことに対する抵抗は、多くの日本人にとって非常に大きい（主語大きめ）。言い換えれば「未熟な英語力で他人と話すのが恥ずかしい」のが大きな壁だと感じる。&lt;/p&gt;

&lt;p&gt;肝心の定量的な英語力を計測できていないので、実技（口頭のコミュニケーション）もある英検を受けることにした。ちなみに会社でも CEFR に沿った試験を定期的に受けているが、折角なのでもう少しパブリックな試験を受けてみようという意図がある。英検は中学校3年生の時に3級に合格して以来ノータッチだったが、来年のうちに2級を、最終的には準1級に合格することを目標とすることにした。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;英語学習サービスについての話は &lt;a href=&#34;https://strobo.fm/episode/65/&#34;&gt;#strobofm ep.65 プライバシー保護 (@oinume)&lt;/a&gt; でも触れている
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2019年の振り返り</title>
      <link>https://1000ch.net/posts/2019/look-back-over-2019.html</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2019/look-back-over-2019.html</guid>
      <description>

&lt;h1 id=&#34;2019年の振り返り&#34;&gt;2019年の振り返り&lt;/h1&gt;

&lt;p&gt;自分用の2019年振り返り。こうして振り返ってみると色々やっているが、業務的なことを含めるともっと色々ある。何せ、弊ペイをリリースしたのがまだ今年の2月というのだから驚きである。正直今年頭のことは記憶が曖昧になってきているが、頑張って書き起こしてみる。&lt;/p&gt;

&lt;h2 id=&#34;1-13-次世代-web-カンファレンス-https-nextwebconf-connpass-com-event-103056-の-nwc-perf-で登壇した&#34;&gt;1.13 &lt;a href=&#34;https://nextwebconf.connpass.com/event/103056/&#34;&gt;次世代 Web カンファレンス&lt;/a&gt; の &lt;code&gt;#nwc_perf&lt;/code&gt; で登壇した&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;#nwc_perf&lt;/code&gt; 枠で &lt;a href=&#34;https://twitter.com/sisidovski&#34;&gt;@sisidovski&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/_likr&#34;&gt;@_likr&lt;/a&gt; の二人と、これからの Web パフォーマンスについて議論してきた。&lt;/p&gt;

&lt;p&gt;公開されたスペースで60分間議論しっぱなしというのは初体験で新鮮そのものだった。登壇者で開催された懇親会のほうが議論が盛り上がったのはここだけの秘密である。&lt;/p&gt;

&lt;p&gt;&lt;fluid-iframe src=&#34;https://www.youtube.com/embed/nXvHsb3uCIw&#34;&gt;&lt;/fluid-iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-19-chrome-tech-talk-night-12-https-events-withgoogle-com-chrome-tech-talk-night-12-で登壇した&#34;&gt;2.19 &lt;a href=&#34;https://events.withgoogle.com/chrome-tech-talk-night-12/&#34;&gt;Chrome Tech Talk Night #12&lt;/a&gt; で登壇した&lt;/h2&gt;

&lt;p&gt;Google で Web パフォーマンスについて取り組んでいる &lt;a href=&#34;https://twitter.com/katiehempenius&#34;&gt;@katiehempenius&lt;/a&gt; の来日に合わせて開催された Chrome Tech Talk Night #12 にて登壇し、Web パフォーマンスに関する Web 標準技術のアップデートについて話してきた。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;e173560a8a1044f1b7442e946a42a60c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;3-2-ゲーム実機音源楽団-第一回コンサート-http-nesband-com-gameband1-に行った&#34;&gt;3.2 &lt;a href=&#34;http://nesband.com/gameband1/&#34;&gt;ゲーム実機音源楽団 第一回コンサート&lt;/a&gt;に行った&lt;/h2&gt;

&lt;p&gt;スギモトリガーに誘われて &lt;a href=&#34;http://nesband.com/&#34;&gt;NES BAND&lt;/a&gt; のライブに行ってきた。NES BAND はファミコン実機を音源として1人1チャンネルずつ、4人で生演奏するバンドである。演奏者がキーボードを操作して入力し、接続されたファミコンやスーパーファミコンなどから出力するというもの。実機から音が出力されるのでゲーム音楽そのままだし、バンドメンバーの息もピッタリだし、スーパーファミコン世代に突き刺さる選曲で非常に良かった。&lt;/p&gt;

&lt;p&gt;&lt;fluid-iframe src=&#34;https://www.youtube.com/embed/JPs8yL1ptw4&#34;&gt;&lt;/fluid-iframe&gt;&lt;/p&gt;

&lt;p&gt;ライブの様子は YouTube にて公開されている。是非とも聴いて欲しい。&lt;/p&gt;

&lt;h2 id=&#34;3-29-エンジニア-hub-https-employment-en-japan-com-engineerhub-にてインタビューされた&#34;&gt;3.29 &lt;a href=&#34;https://employment.en-japan.com/engineerhub/&#34;&gt;エンジニア Hub&lt;/a&gt; にてインタビューされた&lt;/h2&gt;

&lt;p&gt;自分の Web パフォーマンスに関する取り組みや OSS 活動へのモチベーションについてなど、普段はあまり話さないようなこともインタビューしてもらって、新鮮な体験だった。インタビューの内容は &lt;a href=&#34;https://employment.en-japan.com/engineerhub/entry/2019/05/08/103000&#34;&gt;grdの作者が考える、いまフロントエンドエンジニアに求められる「速度という機能」 - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;にて公開されている。&lt;/p&gt;

&lt;h2 id=&#34;4-27-jagmo-4月公演-愛の交響詩-for-symphonic-lovers-http-jagmo-jp-lp-lovers-に参加した&#34;&gt;4.27 &lt;a href=&#34;http://jagmo.jp/lp/lovers/&#34;&gt;JAGMO 4月公演『愛の交響詩 - for Symphonic Lovers -』&lt;/a&gt; に参加した&lt;/h2&gt;

&lt;p&gt;JAGMO の公演には事あるごとにスギモトリガーと参加している。例によってお目当ては MOTHER シリーズの音楽である（もちろん他の演目も素晴らしいけど）。オフィシャルで公開されている動画があったので貼っておく。&lt;/p&gt;

&lt;p&gt;&lt;fluid-iframe src=&#34;https://www.youtube.com/embed/b6oVG_jI6OI&#34;&gt;&lt;/fluid-iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-6-code-chrysalis-https-www-codechrysalis-io-lng-jp-の英語強化プログラムに参加した&#34;&gt;5.6 &lt;a href=&#34;https://www.codechrysalis.io/?lng=jp&#34;&gt;Code Chrysalis&lt;/a&gt; の英語強化プログラムに参加した&lt;/h2&gt;

&lt;p&gt;えーじさんとランチしている時に英語の話になって、その時にこの Code Chrysalis の存在を知った。自分が受講したのは English for Engineers という1日2時間、1週間に3日間、それを3週間やって英語をトレーニングするというプログラムだった（今はこのコースはなくなっているっぽい）。&lt;/p&gt;

&lt;p&gt;言語に関しては3週間やってどうこうなるものではないので、このプログラムを経て劇的に何か変化したかと言われるとそうではない。どちらかといえば「なるべくポジティブな表現を使う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;」「プレゼンテーションのときに気を付けるべきこと」「コミュニケーション時の工夫」など、英語文化圏における様々なお作法やコツを教えてもらったという感じ。&lt;/p&gt;

&lt;h2 id=&#34;5-18-inside-frontend-3-https-inside-frontend-connpass-com-event-126382-で登壇した&#34;&gt;5.18 &lt;a href=&#34;https://inside-frontend.connpass.com/event/126382/&#34;&gt;Inside Frontend #3&lt;/a&gt; で登壇した&lt;/h2&gt;

&lt;p&gt;Inside Frontend #3 に、&lt;a href=&#34;https://strobo.fm&#34;&gt;#strobofm&lt;/a&gt; の公開収録という形で出演させてもらえることになった。これで Inside Frontend には、初回から全て登壇していることになる。来年も開催されそうであれば、Call for Proposal に申し込みたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/1000ch/component-of-web-frontend&#34;&gt;Web フロントエンドにおけるコンポーネント化のアプローチ&lt;/a&gt; at &lt;a href=&#34;https://inside-frontend.connpass.com/event/47920/&#34;&gt;Inside Frontend #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web パフォーマンスについて何でも訊いて下さい at &lt;a href=&#34;https://inside-frontend.connpass.com/event/74625/&#34;&gt;Inside Frontend #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strobo.fm/episode/50/&#34;&gt;#strobofm ep.50 将来 (@hiloki)&lt;/a&gt; at &lt;a href=&#34;https://inside-frontend.connpass.com/event/126382/&#34;&gt;Inside Frontend #3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-3-mercari-x-merpay-frontend-tech-talk-vol-2-https-mercari-connpass-com-event-134185-を開催した&#34;&gt;7.3 &lt;a href=&#34;https://mercari.connpass.com/event/134185/&#34;&gt;Mercari x Merpay Frontend Tech Talk vol.2&lt;/a&gt; を開催した&lt;/h2&gt;

&lt;p&gt;会社の Web に関する勉強会も継続的にやっていこうということで、Mercari x Merpay Frontend Tech Talk という名前を関した勉強会をやっていくことにした。とりあえず今回は、社内の Software Engineer (Frontend) にアウトプットしてもらおうということで、社内の開発で得た知見や取り組みを中心に発表してもらった。&lt;/p&gt;

&lt;p&gt;この回は発表者がメルカリとメルペイで染まっているが、染めたい意図があるわけではなく、むしろ社内外を問わず発表者を募って開催していきたい。&lt;/p&gt;

&lt;h2 id=&#34;9-15-mikkeller-beer-celebration-tokyo-https-shibuyastream-jp-event-eventdetail-php-id-164-に参加した&#34;&gt;9.15 &lt;a href=&#34;https://shibuyastream.jp/event/eventdetail.php?id=164&#34;&gt;Mikkeller Beer Celebration Tokyo&lt;/a&gt; に参加した&lt;/h2&gt;

&lt;p&gt;渋谷ストリームで開催された &lt;a href=&#34;https://mbctokyo.com/&#34;&gt;Mikkeller Beer Celebration Tokyo&lt;/a&gt; に1日だけ参加してきた。ビールが飲み放題込の参加費で12,500円かかったが、各国のビールを沢山飲めて満足度は高かった。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/MBCT?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#MBCT&lt;/a&gt; &lt;a href=&#34;https://t.co/tP7N0dzdQv&#34;&gt;https://t.co/tP7N0dzdQv&lt;/a&gt; &lt;a href=&#34;https://t.co/qodOuDMo8b&#34;&gt;pic.twitter.com/qodOuDMo8b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1173212236489216001?ref_src=twsrc%5Etfw&#34;&gt;September 15, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;9-28-鹿島アントラーズ-vs-コンサドーレ札幌を観戦した&#34;&gt;9.28 鹿島アントラーズ vs コンサドーレ札幌を観戦した&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jleague.jp/match/section/j1/27/&#34;&gt;2019明治安田生命J1リーグ 第27節 鹿島アントラーズ vs コンサドーレ札幌&lt;/a&gt;を会社の同僚と一緒に観戦した。サッカーの試合を生で観戦するのは久しぶりだったが、会社のチームということもあり、応援にも熱が入る。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;鹿島アントラーズ vs コンサドーレ札幌 (@ Kashima Soccer Stadium for Kashima Antlers vs Consadole Sapporo in 鹿嶋市, 茨城県) &lt;a href=&#34;https://t.co/dnFLo7BWxR&#34;&gt;https://t.co/dnFLo7BWxR&lt;/a&gt; &lt;a href=&#34;https://t.co/o7ffNQtKb8&#34;&gt;pic.twitter.com/o7ffNQtKb8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1177818151670693888?ref_src=twsrc%5Etfw&#34;&gt;September 28, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;10-27-jsdc-2019-https-2019-jsdc-tw-に参加した&#34;&gt;10.27 &lt;a href=&#34;https://2019.jsdc.tw/&#34;&gt;JSDC 2019&lt;/a&gt; に参加した&lt;/h2&gt;

&lt;p&gt;同僚が登壇するということで、応援と現地での広報活動を兼ねて参加してきた。JSDC 2019 は台北で開催されたので、カンファレンスの前後の時間は市街地を少しだけ観光できた。時間があれば九份にも行きたかったが、そこまでは時間が取れず断念した。&lt;/p&gt;

&lt;div style=&#34;position: relative; width: 100%; padding-top: 78.37%;&#34;&gt;
  &lt;iframe 
    style=&#34;position: absolute; top: 0; right: 0; width: 100% !important; height: 100% !important;&#34;
    src=&#34;https://www.linkedin.com/embed/feed/update/urn:li:share:6609745599141158912&#34; 
    frameborder=&#34;0&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;台湾は中国に比べて英語が通じるシーンが多く、現地の人とのコミュニケーションにはそこまで困らなかった。この写真は夜市の様子を撮ったもので、台湾らしい雰囲気を楽しめた。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;zh&#34; dir=&#34;ltr&#34;&gt;台灣的回憶🇹🇼 &lt;a href=&#34;https://t.co/Jvbg30WCHm&#34;&gt;pic.twitter.com/Jvbg30WCHm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1206136772574363648?ref_src=twsrc%5Etfw&#34;&gt;December 15, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;11-16-frontend-conference-fukuoka-2019-https-eventon-jp-18416-で登壇した&#34;&gt;11.16 &lt;a href=&#34;https://eventon.jp/18416/&#34;&gt;Frontend Conference Fukuoka 2019&lt;/a&gt; で登壇した&lt;/h2&gt;

&lt;p&gt;Frontend Conference Fukuoka 2019 にお呼ばれして、登壇してきた。&lt;/p&gt;

&lt;p&gt;福岡で発表するのは 2014年1月25日に開催された &lt;a href=&#34;http://frontrend.github.io/blog/frontrend-in-fukuoka-end&#34;&gt;Frontrend in Fukuoka&lt;/a&gt; 以来になる。金曜日に有給休暇を取得して前日入りしたので、資料の準備をする傍ら、福岡の街を散策した。昼間はメルカリの福岡オフィスに侵入したり、夜は&lt;a href=&#34;https://fec-fukuoka.connpass.com/event/154737/&#34;&gt;前夜祭として開催されたリジェクトコン&lt;/a&gt;にも参加した。会場の &lt;a href=&#34;https://pepabo.com/company/access/&#34;&gt;GMO ペパボ福岡オフィス&lt;/a&gt;が天神にあったので、博多から天神までメルチャリで移動した。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;福岡で乗ったメルチャリ &lt;a href=&#34;https://t.co/wV7P1wX4vi&#34;&gt;pic.twitter.com/wV7P1wX4vi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1206188616763920384?ref_src=twsrc%5Etfw&#34;&gt;December 15, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;イベントは九州産業大学で開催された。博多駅からおよそ15分程電車に揺られていると、到着する。このカンファレンスで一番ありがたかったのはトップバッターだったことで、自分の発表が終わったあとは他の人の発表を見たり、ゆっくりしたりするなどで楽しむことができた。発表の機会があれば、是非また福岡に行きたい。&lt;/p&gt;

&lt;p&gt;&lt;fluid-iframe src=&#34;https://www.youtube.com/embed/AfqCwgG2pus&#34;&gt;&lt;/fluid-iframe&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d33f506a2ee348eaaaca0af3a8adbbe0&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;セッション内容は &lt;a href=&#34;https://tech.mercari.com/entry/2019/12/02/000000&#34;&gt;Web パフォーマンスのための HTML 最適化 - Mercari Engineering Blog&lt;/a&gt; に書き起こしてある。&lt;/p&gt;

&lt;h2 id=&#34;11-26-mercari-x-merpay-frontend-tech-talk-vol-3-https-mercari-connpass-com-event-153687-を開催した&#34;&gt;11.26 &lt;a href=&#34;https://mercari.connpass.com/event/153687/&#34;&gt;Mercari x Merpay Frontend Tech Talk vol.3&lt;/a&gt; を開催した&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://tech.mercari.com/entry/2019/12/16/090000&#34;&gt;vol.3 では、メルカリ・メルペイ・プレイド・ファーストリテイリング各社の現場の知見が存分に共有された会になった&lt;/a&gt;。2020年の頭にも &lt;a href=&#34;https://mercari.connpass.com/event/83613/&#34;&gt;Mercari x Merpay Frontend Tech Talk vol.4&lt;/a&gt; も開催が決定しているので、是非ともご参加ください。&lt;/p&gt;

&lt;h2 id=&#34;11-30-鹿島アントラーズ-vs-ヴィッセル神戸を観戦した&#34;&gt;11.30 鹿島アントラーズ vs ヴィッセル神戸を観戦した&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jleague.jp/match/section/j1/33/&#34;&gt;2019明治安田生命J1リーグ 第33節 鹿島アントラーズ vs ヴィッセル神戸&lt;/a&gt;を会社の同僚と一緒に観戦した。リーグ優勝がかかった一戦だったが、残念ながら負けてしまった。来季に期待したい。&lt;/p&gt;

&lt;h2 id=&#34;12-13-dist-30-一歩差がつくcssテクニック-https-dist-connpass-com-event-155593-で登壇した&#34;&gt;12.13 &lt;a href=&#34;https://dist.connpass.com/event/155593/&#34;&gt;DIST.30 「一歩差がつくCSSテクニック」&lt;/a&gt; で登壇した&lt;/h2&gt;

&lt;p&gt;DIST に初めて参加したのは &lt;a href=&#34;https://dist.connpass.com/event/100857/&#34;&gt;DIST.23 「マークアップを止めるな！」&lt;/a&gt;で、その時からいつか DIST の勉強会で発表したいと思っており、今回はそれが叶った形になる。&lt;/p&gt;

&lt;p&gt;数あるエンジニアコミュニティの中でも、とりわけ &lt;a href=&#34;http://dist.tokyo/&#34;&gt;DIST&lt;/a&gt; は素晴らしいコミュニティの一つだと思っている。運営が非常にスムーズであり、費用の収支を公開するなど、公平さや透明性を強く意識しているのがわかる。有志でスタッフが集まっているのも頷ける。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ddd6b654b5134dad851131711a18020e&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;ちなみに「速度という機能」という表現については、&lt;a href=&#34;https://blog.codinghorror.com/performance-is-a-feature/&#34;&gt;Performance is a Feature&lt;/a&gt; から借りている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;例えば &amp;ldquo;It&amp;rsquo;s difficult.&amp;rdquo; ではなく &amp;ldquo;It&amp;rsquo;s challenging.&amp;rdquo; と言う、など。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2019年に買って良かったもの</title>
      <link>https://1000ch.net/posts/2019/bought-in-2019.html</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2019/bought-in-2019.html</guid>
      <description>

&lt;h1 id=&#34;2019年に買ってよかったもの&#34;&gt;2019年に買ってよかったもの&lt;/h1&gt;

&lt;p&gt;すっかりご無沙汰のブログですが、今年も書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/bought-in-2015.html&#34;&gt;2015年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2016/bought-in-2016.html&#34;&gt;2016年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2017/bought-in-2017.html&#34;&gt;2017年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2018/bought-in-2018.html&#34;&gt;2018年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sony-α7ⅲ-と単焦点レンズ&#34;&gt;SONY α7ⅲ と単焦点レンズ&lt;/h2&gt;

&lt;p&gt;ついにカメラ沼に足を踏み入れた。選択肢として SONY α6500 等もなくはなかったが、せっかくであれば良いものを購入しようということで、SONY α7ⅲ を買ってみた。カメラに関する知識は皆無レベルなので、まだまだ宝の持ち腐れ状態だが、旅行や食事など、各種イベントには持ち運んで使うようにしてまずまず楽しんでいる。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/81ftrujM4YL._AC_SX679_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07B4CVMW3/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;ソニー SONY ミラーレス一眼 α7 III ズームレンズキット FE 28-70mm F3.5-5.6 OSS ILCE-7M3K&#34;&gt;
  新開発有効約2420万画素35mmフルサイズ裏面照射型CMOSセンサー搭載。693点像面位相差AFセンサー/425点コントラストAFセンサー搭載で被写体を捉えて離さないAF性能。「リアルタイム瞳AF」動物対応。ペットや野生動物の瞳も高速・高精度に検出し、追随可能。AF/AE追随 最高約10コマ/秒連写を実現(連続撮影モード「Hi+」時)。最大710枚(LCDモニター使用時)撮影可能な高いスタミナとタッチによる自由度の高いフォーカス操作
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;購入後にカメラを持つ人々と話をしてみると、価格帯としてそこそこ高めな部類を買ってしまったことに気付かされるが、性能は良い（はずだ）し、いざとなれば売れば良いので然程気にしていない。折角一眼レフを買ったのであれば、単焦点レンズも買ってみようということで、同じく SONY の FE 50mm F1.8 を買った。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/818jLdp72mL._AC_SX679_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07QFDXXS9/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;ソニー デジタル一眼カメラα[Eマウント]用レンズ SEL50F18F (FE 50mm F1.8) &amp; Kenko カメラ用フィルター MC プロテクター NEO 49mm レンズ保護用&#34;&gt;
  新規光学設計により高画質を実現した、小型・軽量な開放F値1.8の大口径標準単焦点レンズ。携帯性に優れた小型・軽量デザイン。非球面レンズを使用した新規光学設計により高画質を実現。開放F値1.8、単焦点レンズならではのぼけ味を生かした撮影が可能
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;あとはデータの保存先となる SD カードも購入した。今はだいぶ安くなってるのね…。自分の場合は Raw Data は使わず、JPEG のみを保存するようにしている。もちろん Raw Data も残しておきたい気持ちはあるけど、実運用を考えるとどうしても Google Photo 管理になるだろうし、キリが無くなりそうなので割り切っている。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/51t%2BbNHdm5L._AC_SX679_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07DVGDQHR/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Transcend SDカード 64GB UHS-I U3 V30 対応 Class10 (最大転送速度95MB/s) 5年保証 TS64GSDC300S-E【Amazon.co.jp限定】&#34;&gt;
  カードタイプ : 3D TLC SDXC : CLASS10 UHS-I U3 V30。
  転送速度 : 読出し最大95MB/s。
  動作温度 : -25℃~85℃ : 耐温度、防水、耐磁、耐X線、静電耐性。
  保証 : 5年保証 / 記録データの消失に関する保証はございませんので予めご了承ください。保証規定に関してはトランセンドホームページをご参照ください。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h2 id=&#34;anker-powerport-atom-pd-1-pd対応-30w-usb-c急速充電器&#34;&gt;Anker PowerPort Atom PD 1(PD対応 30W USB-C急速充電器)&lt;/h2&gt;

&lt;p&gt;発売時点でかなり話題になっていた Anker の小型急速充電器だが、プラグを折り畳めないのが気になって買っていなかった。で、最近になってまた気になりはじめて結局買ってしまったわけだが、非常に便利に使っている。かばんに入れていても気にならない重さなので、携帯用として常に入れっぱなしにしてある。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/614SyJ-alnL._AC_SX679_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07DHQKQPL/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Anker PowerPort Atom PD 1(PD対応 30W USB-C急速充電器)【GaN (窒化ガリウム) 採用/Power Delivery対応/超コンパクトサイズ 】&#34;&gt;
  新素材 GaN (窒化ガリウム) 採用：人工衛星等の産業用機械に用いられていた次世代パワー半導体素材「GaN」を、Ankerが約2年の歳月をかけて充電器に応用。世界に先駆け、発熱を抑えた高効率充電を可能にしました。
    コンパクト、でもパワフル：ノートPCを充電できる急速充電器をスマートフォン用充電器のサイズで実現しました。Apple製品やタブレット端末、ノートPCや他のUSB-C機器へ最大30Wの高出力によるフルスピード充電が可能です。
    フルスピード充電技術：一般的な5W出力のACアダプターに比べて2.5倍の速さで充電が可能です。iPhone 11であればわずか30分の充電時間で最大50％まで充電できます。
    驚くほどのコンパクトサイズ：一般的なノートPC付属の純正充電器に比べおよそ40％も小型なデザインで、ゴルフボールとほとんど同じ大きさです。ポケットなどわずかなスペースでも大きさを気にせず持ち運びが可能です。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;これを購入するより前には、知人に薦められた &lt;a href=&#34;https://www.amazon.co.jp/dp/B01LATWL5G/?tag=1000ch-22&#34;&gt;Anker PowerCore Fusion 5000&lt;/a&gt; を使っていた。これは USB 充電器に加えてモバイルバッテリーを兼ねたガジェットである。実際、電源がない場所でモバイルデバイスの電池が少なくなるというシーンには何度も出くわしており、かなり活躍してくれているのだが、大きさと重さが少し気になっていた。&lt;/p&gt;

&lt;p&gt;それに対して Anker PowerPort Atom PD 1 は、プラグを折り畳めないことを加味しても格段に小さく軽い。コンパクトであるというのは正義というのを強く実感している。しかも 30W というパワフルな充電能力を備えている。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/51zyXoGXbeL._AC_SX679_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B071XYBPMN/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Anker PowerLine+ USB-C &amp; USB-C 2.0 ケーブル (0.9m グレー) 【PD対応】&#34;&gt;
  高速充電・同期：PD対応。USB-Cポートからフルスピードでスマートフォンやタブレットに充電可能。480 Mbpsのハイスピード転送により、100の楽曲を数秒で転送できます。
  高耐久の最終形：外部には2重に編み込まれた高耐久ナイロン、内部には高耐久素材を使用。コネクタ部分もレーザー溶接を施し、その全てにおいて高耐久を追求しました。PowerLine+は一般的なケーブルより5倍以上も長持ちします。
  便利なポーチ付属：高級感のあるフェルト製ポーチが同梱。用途に応じて、ケーブルの長さを簡単に調節可能。また持ち運ぶ際には、PowerLine+本体をしっかりと保護できます。ケーブルもポーチも高級感があり、プレゼントにも最適です。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h2 id=&#34;詰め替えそのまま-7点セット-https-www-amazon-co-jp-dp-b003xkof2s-tag-1000ch-22&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B003XKOF2S/?tag=1000ch-22&#34;&gt;詰め替えそのまま 7点セット&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;シャンプー、リンス、ボディソープは詰替え用のものを購入し、無印良品の PET 詰替えボトルに都度詰めて使っていた。しかしこれには「最後の一滴まで使いにくい」「ボトルを毎回洗う必要がある」「詰め替える必要がある」などの課題感を感じていた。&lt;/p&gt;

&lt;p&gt;そこで見つけたのがこの「詰め替えそのまま」である。これは詰め替え用のパッケージに挿すだけで使えるという優れもの。見栄えに関して言えば PET 詰替えボトルより宜しくないものの、感じていた課題は解決されているし、実用性という点ではかなり高い。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/61Ga5lThfSL._AC_SY879_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B003XKOF2S/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;詰め替えそのまま 7点セット PS-7S&#34;&gt;
  サイズ:ポンプ(11.5×4.5cm) ホルダー(9×4.3cm) アーム(21×5.8cm)。本体重量:0.41kg。素材・材質:ABS樹脂 エラストマー樹脂。原産国:日本国。セット内容:ホルダー3・ポンプ3・アーム1の7点セット
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h2 id=&#34;面白かった漫画リスト&#34;&gt;面白かった漫画リスト&lt;/h2&gt;

&lt;p&gt;友人や同僚に感化されて漫画に目覚めた2019年だった。買った漫画の冊数を公開するには若干気が引ける程度には買い漁って読んだので、中でもコレはオススメできるというタイトルを挙げていく。なお、私の独断と偏見で、いわゆる王道に該当するものは含めていない。&lt;/p&gt;

&lt;h3 id=&#34;波よ聞いてくれ&#34;&gt;波よ聞いてくれ&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B15lMnnSSmS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B077LBHW9H/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;波よ聞いてくれ (全7巻) Kindle版&#34;&gt;
  舞台は北海道サッポロ。主人公の鼓田ミナレは酒場で知り合ったラジオ局員にグチまじりに失恋トークを披露する。すると翌日、録音されていたトークがラジオの生放送で流されてしまった。激高したミナレはラジオ局に突撃するも、ディレクターの口車に乗せられアドリブで自身の恋愛観を叫ぶハメに。この縁でラジオ業界から勧誘されるミナレを中心に、個性あふれる面々の人生が激しく動き出す。まさに、波よ聞いてくれ、なのだ！
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;彼方のアストラ&#34;&gt;彼方のアストラ&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/519L2L6rtPL.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07L4MWMZY/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;彼方のアストラ 全巻合本版 (ジャンプコミックスDIGITAL)&#34;&gt;
  ジャンプ+の超人気SFミステリー「彼方のアストラ」1～5巻全巻分を、新たに描き下ろされたカバーイラストで 電子コミック1冊に再編集！　さらに、1巻から5巻の表紙イラストやカラーイラストを集めたイラスト集や、初公開の秘蔵ネームデータも特典として収録した、全SFミステリーファン必携の1冊です！
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;左ききのエレン&#34;&gt;左ききのエレン&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1sVBmkHlgS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B07BHZNYZB/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;左ききのエレン (全11巻) Kindle版&#34;&gt;
  広告代理店勤務の若手デザイナー・朝倉光一。納得出来ない理由で自ら勝ち取った仕事を取り上げられた彼は、やりきれない気持ちを抱えて横浜の美術館へと向かう。そこは、彼が初めて「エレン」という才能と出会った場所で…。大人の心も抉るクリエイター群像劇、開幕！
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;チェンソーマン&#34;&gt;チェンソーマン&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1RGZ23Q0zS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B07RL4GB9T/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;チェンソーマン (全5巻) Kindle版&#34;&gt;
  悪魔のポチタと共にデビルハンターとして借金取りにこき使われる超貧乏な少年・デンジ。ド底辺の日々は、残忍な裏切りで一変する!!　悪魔をその身に宿し、悪魔を狩る、新時代ダークヒーローアクション、開幕！
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;サマータイムレンダ&#34;&gt;サマータイムレンダ&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1ofsAaNljS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B07P1DK9G1/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;サマータイムレンダ (全9巻) Kindle版&#34;&gt;
  幼馴染の潮が死んだ――。その報せを聞き、故郷の和歌山市・日都ケ島に帰ってきた慎平。家族との再会。滞りなく行われる葬儀。だが島にはある異変が…?　ひと夏の離島サスペンス!!
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;spy-family&#34;&gt;SPY×FAMILY&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/A1x6nElfSVL._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B07XTRK2SQ/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;SPY×FAMILY (全3巻) Kindle版&#34;&gt;
  名門校潜入のために「家族」を作れと命じられた凄腕スパイの〈黄昏〉。だが、彼が出会った“娘”は心を読む超能力者！　“妻”は暗殺者で!?　互いに正体を隠した仮初め家族が、受験と世界の危機に立ち向かう痛快ホームコメディ!!
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;マイホームヒーロー&#34;&gt;マイホームヒーロー&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1WiQTyE-wS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B078MVJ7GQ/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;マイホームヒーロー (全9巻) Kindle版&#34;&gt;
  頼れる妻と、ちょっと反抗期気味だけど可愛い高校生の娘。鳥栖哲雄の人生はそれなりに幸せだった。娘の顔に殴打の傷を見つけるまでは。「100万の命の上に俺は立っている」の山川直輝、「サイコメトラー」「でぶせん」の朝基まさしの異色コンビが描く、罪と罰、愛と戦いの物語、開幕！
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;diner&#34;&gt;DINER&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1qfNFYYwbS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B079C7JM5D/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;DINER ダイナー (全8巻) Kindle版&#34;&gt;
  漫然と生きてきた25歳の大場加奈子は、ある日、小銭欲しさから闇サイトのバイトへ足を踏み入れる。犯罪へと巻き込まれ、絶体絶命の窮地に陥った時、謎の男・ボンベロに、その身を買われ命拾いをする。だが、安堵したのも束の間、辿り着いたのは、殺し屋専用の会員制ダイナー（定食屋）だった。冷徹な料理人・ボンベロと凶暴な殺し屋（客）の狭間で、加奈子の残酷なウェイトレス人生が幕を開けた――!!
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;親愛なる僕へ殺意をこめて&#34;&gt;親愛なる僕へ殺意をこめて&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1nCwOs632S._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B07P1DK6TV&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;親愛なる僕へ殺意をこめて (全6巻) Kindle版&#34;&gt;
  「人生は楽しんだもん勝ち」がモットーの大学生・浦島エイジ。だが彼は、人には言えない“過酷な運命”を背負っていた。その現実と向き合った時、彼は惨劇に巻き込まれていく―――。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;route-end&#34;&gt;ROUTE END&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/A1WTrA8p41L._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B075F8ST1V&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;ROUTE END (全8巻) Kindle版&#34;&gt;
  人の死が日常的となる職業、“特殊清掃業”を生業とする青年・春野。彼が近隣で続発する連続猟奇殺人事件、｢END事件｣に足を踏み入れて…。生と死の在り方を問うサイコ・サスペンス開幕!!
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h3 id=&#34;マンホール&#34;&gt;マンホール&lt;/h3&gt;

&lt;p&gt;&lt;affiliate-link 
  src=&#34;https://images-fe.ssl-images-amazon.com/images/I/B1rNzcwtMgS._SY300_.png&#34;
  href=&#34;https://www.amazon.co.jp/gp/product/B074CK6S71&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;マンホール 新装版 (全2巻) Kindle版&#34;&gt;
  【ページ数が多いビッグボリューム版！】夕暮れの商店街で、全裸の男が怪死を遂げた。検死の結果、体から新種の寄生虫が発見される。ベテラン刑事・溝口とその部下・井上は事件を追う内、ひとつのマンホールへとたどり着く。暗闇の中、そこには謎の“施設”の存在が…!?　加速する恐怖、戦慄のバイオ・ホラー!!
&lt;/affiliate-link&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>prefers-color-scheme を使った Dark Mode 対応</title>
      <link>https://1000ch.net/posts/2019/dark-mode.html</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2019/dark-mode.html</guid>
      <description>

&lt;h1 id=&#34;prefers-color-scheme-を使った-dark-mode-対応&#34;&gt;prefers-color-scheme を使った Dark Mode 対応&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt; は &lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/&#34;&gt;Media Queries Level 5&lt;/a&gt; で定義される、システムで明るいテーマ・暗いテーマどちらを要求しているかを参照するメディアクエリである。Safari では 12.1 からサポートされていたが、Chrome の次の安定版である 76 に ship されそうなので、このブログでも申し訳程度に対応した。&lt;/p&gt;

&lt;p&gt;Firefox については現在の安定版である 67 に ship されているし、Mobile Safari についても 13 からサポートされそうなので、ブラウザのサポートは近いうちに広まりそうである。&lt;a href=&#34;https://support.apple.com/ja-jp/HT208976&#34;&gt;macOS は Mojave から Dark Mode を搭載している&lt;/a&gt;ので、試したい人はアップデートしてみて欲しい。&lt;/p&gt;

&lt;h2 id=&#34;シンタックス&#34;&gt;シンタックス&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-color-scheme&#34;&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt; は値に &lt;code&gt;light&lt;/code&gt; と &lt;code&gt;dark&lt;/code&gt;、そして &lt;code&gt;no-preference&lt;/code&gt; の3つを取る。&lt;code&gt;no-preference&lt;/code&gt; はシステムに対して設定していない場合を指す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media (prefers-color-scheme: light) {
  body {
    background: #fff;
    color: #000;
  }
}

@media (prefers-color-scheme: dark) {
  body {
    background: #000;
    color: #fff;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このブログではこれまでの明るい見た目を基本テーマとして、Dark Mode が検出された場合に暗いスタイルを適用するべく、&lt;code&gt;@media (prefers-color-scheme: dark)&lt;/code&gt; を使って上書きしており、&lt;code&gt;@media (prefers-color-scheme: light)&lt;/code&gt; を使って記述を分けてはいない。&lt;/p&gt;

&lt;h2 id=&#34;なぜ対応するのか&#34;&gt;なぜ対応するのか&lt;/h2&gt;

&lt;p&gt;Light Mode では眩しいので Dark Mode を使っているという人に対して、ギャップが生まれないように対応した（ちなみに自分はこれを機に Dark Mode を使い始めてみた）。暗いテーマが今後のデザイントレンドになるかどうかはさておき、ユーザーが選択できるのは重要だと思っている。&lt;/p&gt;

&lt;p&gt;Media Queries Level 5 では &lt;code&gt;prefers-color-scheme&lt;/code&gt; の他にもユーザーエージェントの設定を受容するためのメディアクエリが定義されている。いずれもユーザビリティ・アクセシビリティの観点から対応すべき要素に思える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#inverted&#34;&gt;&lt;code&gt;inverted-colors&lt;/code&gt;&lt;/a&gt;: 色が反転するよう指定されているか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#prefers-reduced-motion&#34;&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt;: 視差効果を減らす設定になっているか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#prefers-reduced-transparency&#34;&gt;&lt;code&gt;prefers-reduced-transparency&lt;/code&gt;&lt;/a&gt;: 透過表現を減らす設定になっているか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#prefers-contrast&#34;&gt;&lt;code&gt;prefers-contrast&lt;/code&gt;&lt;/a&gt;: どのコントラストモードが指定されているか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme&#34;&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt;: どのカラースキーマが指定されているか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drafts.csswg.org/mediaqueries-5/#forced-colors&#34;&gt;&lt;code&gt;forced-colors&lt;/code&gt;&lt;/a&gt;: ユーザーエージェントによる強制色指定が設定されているか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうしたユーザーエージェントによる機能を防ぐプロパティもある。&lt;a href=&#34;https://drafts.csswg.org/css-color-adjust-1/#forced-color-adjust-prop&#34;&gt;&lt;code&gt;forced-color-adjust&lt;/code&gt;&lt;/a&gt; を使えばユーザーエージェントによる調整を防げるし、&lt;a href=&#34;https://drafts.csswg.org/css-color-adjust-1/#propdef-color-adjust&#34;&gt;&lt;code&gt;color-adjust&lt;/code&gt;&lt;/a&gt; なら Web ページ側で指定した通りに表現することを強制できる（この2つのプロパティは意味が酷似しているので、マージされる可能性がある）。&lt;/p&gt;

&lt;p&gt;ただし、OS を含めたユーザーエージェントによる調整などの機能は、余程緻密に設計されていたとしても、ユーザー選択肢を奪わないという意味で防ぐべきではないだろう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2019年のWeb標準という記事を寄稿しました</title>
      <link>https://1000ch.net/posts/2019/web-standards-prospect.html</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2019/web-standards-prospect.html</guid>
      <description>

&lt;h1 id=&#34;2019年のweb標準という記事を寄稿しました&#34;&gt;2019年のWeb標準という記事を寄稿しました&lt;/h1&gt;

&lt;p&gt;あけましておめでとうございます。今年も宜しくお願い致します。&lt;/p&gt;

&lt;p&gt;各ソーシャルでもシェアしましたが、去年に続いて新春特別企画ということで&lt;a href=&#34;https://gihyo.jp/design/column/newyear/2019/web-standards-prospect&#34;&gt;2019年のWeb標準&lt;/a&gt;という記事を gihyo.jp の方へ寄稿しました。ちなみに去年の記事は&lt;a href=&#34;https://gihyo.jp/design/column/newyear/2018/web-standards-prospect&#34;&gt;2018年のWeb標準&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;内容は2018年の&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;W3CによるHTML5.2の勧告とWHATWGの標準化プロセスの整備&lt;/li&gt;
&lt;li&gt;Web Components普及への期待&lt;/li&gt;
&lt;li&gt;Service WorkerがもたらすWebの変化&lt;/li&gt;
&lt;li&gt;クレジットカードのセキュリティとWeb Payments&lt;/li&gt;
&lt;li&gt;HTTPS化の更なる浸透&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;から、2019年の&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft EdgeへのChromiumプロジェクトの採用&lt;/li&gt;
&lt;li&gt;Low Level APIとLayered APIs&lt;/li&gt;
&lt;li&gt;HTTP/2の普及とHTTP/3の標準化&lt;/li&gt;
&lt;li&gt;Webパフォーマンスに関するAPIの拡充&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、被らないように気を付けつつ、私の趣味が色濃く影響しているラインナップになっています。細かいトピックを持ち出せばもっとありますが、大きめな話を拾って事実と私見を混ぜながら綴っています。ポッドキャストのこともあるので以前のような頻度で更新はできていないですが、こうして時々のスナップショットを取るのは趣深いので、ブログ記事は引き続き書いていこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018年に買って良かったもの</title>
      <link>https://1000ch.net/posts/2018/bought-in-2018.html</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/bought-in-2018.html</guid>
      <description>

&lt;h1 id=&#34;2018年に買ってよかったもの&#34;&gt;2018年に買ってよかったもの&lt;/h1&gt;

&lt;p&gt;今年も書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/bought-in-2015.html&#34;&gt;2015年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2016/bought-in-2016.html&#34;&gt;2016年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2017/bought-in-2017.html&#34;&gt;2017年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;珪藻土マットを磨く紙ヤスリ-240番&#34;&gt;珪藻土マットを磨く紙ヤスリ 240番&lt;/h2&gt;

&lt;p&gt;珪藻土マットがあればバスマットが不要になる話は、過去にブログに書いた。どんなに速乾のタイプでも使用後のバスマットは濡れていて、ウッとなることも多かったが、珪藻土マットにしてからは、すぐ乾くし洗う手間もない。価格も安いので、バスマットを使っている人は騙されたと思って試して欲しい。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/81kODTIPNdL._AC_UL75_SR75,75_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B01LXMAO21/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Tenswall 珪藻土バスマット 風呂マット 足ふきマット 消臭 速乾 防カビ 防ダニ 抗菌 約60cm×39cm JD001W グレー&#34;&gt;
  Tenswall 珪藻土速乾バスマットは太古の植物性プランクトン(珪藻)が原材料です。「驚異の吸水力」「脱臭湿度調整効果」「カビやダニの発生を抑制」「洗濯不要でいつでも快適」と多機能が特徴のバスマットです。寸法：横60cm*縦39cm*厚さ1cm 重さ：約2.70ｋｇ。シンプルな薄型設計で、室内利用に最適です。立てかけておけば場所も取りません。メーカー直営店、購入する時に販売元Tenswall JPをお確認してください。他のは偽物です。ご了承ください。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;ただ、長らく使っていると吸水力が低下してきて、なかなか吸わなくなってきたなという瞬間が来る。これは商品の説明にもあるように、使う度に細かいゴミや皮脂などが珪藻土の孔に詰まっていくことで起きる現象である。これはヤスリで表面を磨くと再び吸水力を取り戻すとのことで、紙ヤスリを買って磨いてみたところ、見事に吸水力が復活した。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/617qBeJ%2BMOL._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B077851YZY/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Bigman(ビッグマン) 日本製 紙ヤスリ #240 12枚セット サンダー取り付け可能 紙やすり サンドペーパー 研磨&#34;&gt;
  番手・枚数：#240(12枚)。サイズ：228mm × 93mm。その他：ハンドサンダー・電動サンダーにも取付け可能です。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;ヤスリの目の細かさについては色んな説があるが、今回は240番で試した。要するに、表面を削れれば良い。足で踏んだ感触も、滑らかである。お手入れの頻度は、使用頻度に依るところが大きそうだが、半年〜1年に1度磨けば十分かなという印象。磨くのが面倒という説はあるが、定期的にバスマットを洗って乾かすよりは確実に手間が小さい。&lt;/p&gt;

&lt;h2 id=&#34;qi-ワイヤレス急速充電器-anker-powerwave-7-5-stand&#34;&gt;Qi ワイヤレス急速充電器 Anker PowerWave 7.5 Stand&lt;/h2&gt;

&lt;p&gt;同僚が iPhone をワイヤレスで充電しており、試しに使わせてもらったら &lt;strong&gt;「これは良い！」&lt;/strong&gt; となり、購入した。これを体感してしまうと「ケーブルを抜き差しすればいいじゃん」とはならない。思った以上に無線充電が良すぎて、気づいたらオフィス用と自宅用の 2 つ買っていた。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/61kb0gr9ySL._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B07DJC28GS/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Anker PowerWave 7.5 Stand (5W / 7.5W / 10W Qi ワイヤレス急速充電器)&#34;&gt;
  ワイヤレス充電はこれひとつで：最新のiPhone(最大7.5W)やSamsung製スマートフォン主要モデル(最大10W)を含む、ワイヤレス充電に対応するあらゆる機器と互換性があります(*急速充電に対応するには、別売りのQC3.0対応充電器を合わせてご利用ください)。&lt;br&gt;
    ケースはそのままで：PowerWaveは、ほとんどのスマホケースをつけたままでスマートフォンを充電することが可能です(※5mm以上の厚みがあるケースや金属製や磁気を帯びたケースおよびクレジットカードは、充電前に取り外してください)。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;電子機器周り、特に給電系で安心感がある気がする Anker を選んだ。Mac やらヘッドホンやら、あらゆる電池機器が無線でできれば良いのに、と思う。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/61nWyZrMS4L._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B01N533KZH/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;Anker PowerPort Speed 4 (QC3.0搭載 4ポート 43.5W USB急速充電器)&#34;&gt;
  圧倒的な充電速度：Qualcomm Quick Charge 3.0対応ポートを搭載。また、Anker独自技術PowerIQとVoltageBoostを搭載し、あらゆるUSB機器にフルスピード充電が可能です。十分な4ポート：4ポートで合計43.5Wの出力が可能。家族全員分のスマホやタブレットを同時に急速充電可能です。また100-240Vの入力に対応しているので、世界中でご利用いただけます。海外旅行にも最適です。
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h2 id=&#34;teslong-のスコープ付き耳かき&#34;&gt;Teslong のスコープ付き耳かき&lt;/h2&gt;

&lt;p&gt;いつぞや Twitter のタイムラインに流れてきて、安かったので面白半分で買ってみた。簡単に言うと USB Type-C の耳掻き付きカメラで、耳の中をディスプレイやスマートフォンで見ながら耳掃除ができるというものである。自分の耳の中は見えないし、仮に他人の耳だとしても穴の中は見にくい。その耳の中をライト付きスコープで撮影しながら耳掻きできるのは、なんとも言い難い。ピンポイントで狙い撃ちできる。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/51RpMR5CijL._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B076P35FLX/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;[改良型]Teslong® 電子耳鏡 耳かき スコープ&#34;&gt;
  主に耳道内と鼻内の検査です。パソコン、携帯などに接続して画像伝送ができる、画像はパソコンに保存する機能もあります。画像の取り込や回転、拡大などの編集も可能で、日常の診断のみでなく、患者さんヘの説明や診断の記録、医学教育にも役立ちます。インターフェースに適用のはwindows XP/7/8/10, mac OS X 10.6または最高バージョン、パソコンとMacに接続可能です。Android microインターフェースに適用のは携帯Androidシリーズおよび4.4以上バージョンのです。携帯はOTG とUVCに適用するかどうかを確認してください。ケーブルは1.5m 2.0USBを搭載 センサー解像度:640x480 Pixels イメージセンサー:0.3Megapixel 焦点距離:20mm-30mm
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;私は Mac に接続して使っている。USB 経由で給電されるので電池などは不要だし、接続すればあとは QuickTime を起動して &lt;strong&gt;New Movie Recording&lt;/strong&gt; するだけで撮影を開始できる。&lt;/p&gt;

&lt;h2 id=&#34;コクヨの吊り下げ名札用リール&#34;&gt;コクヨの吊り下げ名札用リール&lt;/h2&gt;

&lt;p&gt;オフィスビルの入館カードをカードケースに入れて使っているが、個人的には首にかけるタイプはブラブラしてイヤなので、フックで引っ掛けられる + リールで伸ばせるツールを探してこちらを購入した。後述する Pixel 3 のケースにカードを差せればそれでも良かったが、FeLiCa と干渉するのも微妙なので避けた。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/51nJTudkqeL._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B000GRUM6Y/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;コクヨ 吊り下げ名札用リール アイドプラス ナフ-R1 黒&#34;&gt;
  製品概要:伸ばして使えるネックストラップ用リールパーツ
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;h2 id=&#34;google-pixel-2-と-google-pixel-3&#34;&gt;Google Pixel 2 と Google Pixel 3&lt;/h2&gt;

&lt;p&gt;2018年の頭に Pixel 2 を購入し、このタイミングで iPhone 7 から乗り換えた。電波暗室でしか使えないのは非常に不便だったが、Android は OS レベルで Google アカウントをサポートしているので、私のように Chrome・Maps・Gmail・Photos・Drive・Home・Wifi などの Google 製品をよく使う人類にとっては便利なシーンが多い。&lt;/p&gt;

&lt;p&gt;&lt;affiliate-link
  src=&#34;https://images-na.ssl-images-amazon.com/images/I/81KgaU7qznL._SX425_.jpg&#34;
  href=&#34;https://www.amazon.co.jp/dp/B0766GHWM6/&#34;
  tag=&#34;1000ch-22&#34;
  title=&#34;(SIMフリー) Google Pixel 2 64GB (Black) [並行輸入品]&#34;&gt;
&lt;/affiliate-link&gt;&lt;/p&gt;

&lt;p&gt;iPhone 7 からの乗り換えなので FeLiCa が使えなくなったのと、iOS でよく使っていたアプリが Android にはないことも多々あったあたりは少々痛みを伴った。ひとつが RSS リーダーの Reeder で、もうひとつが Twitter クライアントの Tweetbot である。RSS リーダーは Readably を、Twitter クライアントは Falcon Pro 3 を使い始めて、どちらも良くできているのだが、Reeder や Tweetbot ほどの使い心地は体感できていない。&lt;/p&gt;

&lt;p&gt;そんな Pixel 2 を使い始めて1年も経たないうちに、&lt;a href=&#34;https://store.google.com/jp/product/pixel_3&#34;&gt;Pixel 3 が発表された&lt;/a&gt;。ロクに調べもせず即ポチしたが、前評判の通り FeLiCa に対応しており、電子マネー生活に戻ることができた。カメラ性能もかなり優秀だが、Pixel 2 のカメラ性能もだいぶ良かったので、差という差は体感できていない。唯一、とあるアプリを消せないことだけは Fxck だが、それを除けば非常に満足している。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GAE のプロジェクトに Firewall を設定する</title>
      <link>https://1000ch.net/posts/2018/gae-project-firewall.html</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/gae-project-firewall.html</guid>
      <description>

&lt;h1 id=&#34;gae-のプロジェクトに-firewall-を設定する&#34;&gt;GAE のプロジェクトに Firewall を設定する&lt;/h1&gt;

&lt;p&gt;GAE のプロジェクトには Console から Firewall の設定ができる。&lt;/p&gt;

&lt;p&gt;GAE を利用している GCP のプロジェクトを &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;GCP Console&lt;/a&gt; から選択し、ハンバーガーメニューをクリックして表示されるドロワーメニューの、 &lt;strong&gt;App Engine&lt;/strong&gt; → &lt;strong&gt;Firewall rules&lt;/strong&gt; を選択する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2018/gae-project-firewall/gcp-console.png&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;default のルールとして、全てのドメイン &lt;code&gt;*&lt;/code&gt; に対して &lt;strong&gt;Allow&lt;/strong&gt; が設定されているので、適用するルールを &lt;a href=&#34;https://console.cloud.google.com/appengine/firewall/create&#34;&gt;Create Rule&lt;/a&gt; から作成する。&lt;/p&gt;

&lt;p&gt;例えば &lt;code&gt;111.111.111.111&lt;/code&gt; からのアクセスのみに制限するには、以下の状態にする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Priority: &lt;code&gt;1&lt;/code&gt;, Action: &lt;code&gt;Allow&lt;/code&gt;, IP Range: &lt;code&gt;111.111.111.111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Priority: &lt;code&gt;default&lt;/code&gt;, Action: &lt;code&gt;Deny&lt;/code&gt;, IP Range: &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SVG ファイルを GUI ツールで最適化する</title>
      <link>https://1000ch.net/posts/2018/optimize-svg-in-gui.html</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/optimize-svg-in-gui.html</guid>
      <description>

&lt;h1 id=&#34;svg-ファイルを-gui-ツールで最適化する&#34;&gt;SVG ファイルを GUI ツールで最適化する&lt;/h1&gt;

&lt;p&gt;Sketch や各種ツールから出力する SVG には、表示には必要ないデータが含まれることがある。SVG を git などでバージョン管理することも多いと思うが、この時に不要なデータを含めたくない。&lt;/p&gt;

&lt;p&gt;ツールとしては &lt;a href=&#34;https://github.com/svg/svgo&#34;&gt;svgo&lt;/a&gt; という Node.js 製のツールがあり、これを使うことで不要なデータを取り除きつつ、整形や最小化処理を適用できる。&lt;/p&gt;

&lt;p&gt;どのタイミングで最適化するのかという話があるが、それについては&lt;a href=&#34;https://1000ch.net/posts/2016/optimize-image-on-workflow.html&#34;&gt;ワークフローにおける画像の最適化&lt;/a&gt;でも書いてある。今回は git のコミットフックではなく、GUI ツールで最適化することを考えてみる。&lt;/p&gt;

&lt;h2 id=&#34;gui-ツールでやる必要性&#34;&gt;GUI ツールでやる必要性&lt;/h2&gt;

&lt;p&gt;は特にないが、とりあえず1ファイルだけ最適化したかったり、ターミナルではなくテキストエディタでやりたいなど、git のコミットフックを用意するまでもない場面の選択肢のひとつとして考えられる。&lt;/p&gt;

&lt;p&gt;Sketch のプラグインをインストールしておけば、エクスポート時に最適化した状態で出力できるので、漏れがない。あとは SVG に限らないが、エクスポートする前に、アイコンであればアートボードのサイズを揃えたり、パスをアウトライン化しておいたり、アートボードの名前を意味のあるものにしておくと良い。これをやっておくと、ViewBox のサイズが統一され、不要な transform の情報がなくなり、 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 要素に意味のある名前が挿入される。&lt;/p&gt;

&lt;h2 id=&#34;各種プラグイン&#34;&gt;各種プラグイン&lt;/h2&gt;

&lt;p&gt;Figma については &lt;a href=&#34;https://blog.figma.com/1b2e2cedf319&#34;&gt;With Figma’s new SVG Exports, less = more&lt;/a&gt; を見るに、ツールがない様子である。他のツールについては、Sketch にはオフィシャルで用意されていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/BohemianCoding/svgo-compressor&#34;&gt;&lt;code&gt;BohemianCoding/svgo-compressor&lt;/code&gt;&lt;/a&gt;: Sketch のプラグインなので、手動でダウンロードする他、&lt;a href=&#34;https://sketchpacks.com/&#34;&gt;Sketchpacks&lt;/a&gt; などからインストールできる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1000ch/vscode-svgo&#34;&gt;&lt;code&gt;1000ch/vscode-svgo&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette&#34;&gt;コマンドパレット&lt;/a&gt; (&lt;kbd&gt;Cmd&lt;/kbd&gt; &lt;kbd&gt;Shift&lt;/kbd&gt; &lt;kbd&gt;P&lt;/kbd&gt;) で &lt;strong&gt;Install Extensions&lt;/strong&gt; を実行し、svgo で検索する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1000ch/atom-svgo&#34;&gt;&lt;code&gt;1000ch/atom-svgo&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;apm install svgo&lt;/code&gt; または &lt;strong&gt;Install&lt;/strong&gt; から svgo で検索する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1000ch/Sublime-svgo&#34;&gt;&lt;code&gt;1000ch/Sublime-svgo&lt;/code&gt;&lt;/a&gt;: コマンドパレット (&lt;kbd&gt;Cmd&lt;/kbd&gt; &lt;kbd&gt;Shift&lt;/kbd&gt; &lt;kbd&gt;P&lt;/kbd&gt;) で &lt;strong&gt;Install Package&lt;/strong&gt; を実行し、svgo で検索する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VSCode と Atom は Node.js を内蔵しているので、インストールするだけで使える。Sublime Text には Node.js が含まれていないので、インストールしている端末の &lt;code&gt;PATH&lt;/code&gt; に &lt;code&gt;node&lt;/code&gt; のパスが通っている必要がある。&lt;/p&gt;

&lt;p&gt;Node.js のインストールについては&lt;a href=&#34;https://qiita.com/1000ch/items/41ea7caffe8c42c5211c&#34;&gt;nodenv を使って Mac に Node.js の環境を構築する&lt;/a&gt;も参考に。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go で Node.js のバージョンマネージャを自作した</title>
      <link>https://1000ch.net/posts/2018/nd.html</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/nd.html</guid>
      <description>

&lt;h1 id=&#34;go-で-node-js-のバージョンマネージャを自作した&#34;&gt;Go で Node.js のバージョンマネージャを自作した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/1000ch/nd&#34;&gt;1000ch/nd&lt;/a&gt; という Node.js のバージョンマネージャを Go で書いた。車輪の再発明もいいところで、特に今使っているバージョンマネージャから切り替えるメリットは今の所ない。ただの作業ログです、悪しからず。&lt;/p&gt;

&lt;h2 id=&#34;それっぽいモチベーション&#34;&gt;それっぽいモチベーション&lt;/h2&gt;

&lt;p&gt;Go は Windows、macOS、Linux といった環境へのクロスコンパイルができることと、実行できるシングルバイナリを配布するだけでランタイムへ依存しなくて済む、この2点で選んだ。&lt;/p&gt;

&lt;p&gt;作ったあとに &lt;a href=&#34;https://twitter.com/hokaccha&#34;&gt;@hokaccha&lt;/a&gt; とした答え合わせで、&lt;code&gt;PATH&lt;/code&gt; の通し方については少々議論になった。今回作ったツールは Node.js のアーカイブファイルをダウンロードして展開し、あらかじめ通しておいたパスから &lt;code&gt;node&lt;/code&gt; にシンボリックリンクを作るだけの単純な実装である。&lt;/p&gt;

&lt;p&gt;代表的な既存ツールは以下のような実装になっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodenv/nodenv&#34;&gt;nodenv/nodenv&lt;/a&gt;: &lt;code&gt;~/.nodenv/shim/node&lt;/code&gt; を起点に実行する Node.js を探索する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hokaccha/nodebrew&#34;&gt;hokaccha/nodebrew&lt;/a&gt;: パスが通った場所から、対象の Node.js へシンボリックリンクを作成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;creationix/nvm&lt;/a&gt;: &lt;code&gt;PATH&lt;/code&gt; を変更して対象の Node.js へパスを通す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;nodenv&lt;/code&gt; は &lt;code&gt;rbenv&lt;/code&gt; のフォークで、グローバルの &lt;code&gt;node&lt;/code&gt; のパスを変更できるだけでなく、カレントディレクトリの &lt;code&gt;.node-version&lt;/code&gt; を参照して実行する Node.js を切り替えできる。高機能で良いが、 &lt;code&gt;.node-version&lt;/code&gt; でバージョンを固定して運用するには関わる人全てのバージョンマネージャを揃える必要があったりして、中々難しい部分もある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; の &lt;code&gt;PATH&lt;/code&gt; を変更する方式は、なかなか痒い部分があるのと、&lt;a href=&#34;https://github.com/creationix/nvm/wiki/NVM-Forks&#34;&gt;欲しい機能があるならフォークして使ってくれというスタンス&lt;/a&gt;なので、ツールとして微妙さを感じている。&lt;/p&gt;

&lt;p&gt;思想や作りは &lt;code&gt;nodebrew&lt;/code&gt; と最も似ていて、記述言語が違うくらい。&lt;/p&gt;

&lt;h2 id=&#34;クロスコンパイルについて&#34;&gt;クロスコンパイルについて&lt;/h2&gt;

&lt;p&gt;Go を選んだ割に、Windows や Linux でのテストをどうしようか考え中なので、まだクロスコンパイル環境は整えている最中である。経緯や概要は &lt;a href=&#34;https://qiita.com/Jxck_/items/02185f51162e92759ebe&#34;&gt;Go のクロスコンパイル環境構築&lt;/a&gt;で抑えたが、状況は改善されているようで、go のインストール時に &lt;code&gt;--with-cc-all&lt;/code&gt; オプションが不要になっていたり、クロスコンパイルに追加で必要だったツールが不要になっている。&lt;/p&gt;

&lt;p&gt;引き続きポイントになるのは &lt;a href=&#34;https://golang.org/doc/install/source#environment&#34;&gt;&lt;code&gt;GOOS&lt;/code&gt; と &lt;code&gt;GOARCH&lt;/code&gt; という2つの環境変数&lt;/a&gt;で、 &lt;code&gt;go build&lt;/code&gt; 時にこれらが参照されることで各種環境向けのバイナリが出力される。これを踏まえて、クロスコンパイルにはいくつか方法がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/nikuyoshi/a6c92119c59144d472ef&#34;&gt;nikuyoshi/build-crosscompile-env.sh&lt;/a&gt;: &lt;code&gt;GOOS&lt;/code&gt; と &lt;code&gt;GOARCH&lt;/code&gt; を切り替えながら &lt;code&gt;go build&lt;/code&gt; するシェルスクリプト&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;mitchellh/gox&lt;/a&gt;: &lt;code&gt;gox&lt;/code&gt; コマンドだけでクロスコンパイルしてくれるコマンドラインツール&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laher/goxc&#34;&gt;laher/goxc&lt;/a&gt;: &lt;code&gt;goxc&lt;/code&gt; コマンドでクロスコンパイルするだけでなく、zip アーカイブやバージョンニングなどもサポートしている高機能なコマンドラインツール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よくできていて使いやすいが、先の通り Windows や Linux 向けビルドは検討中なので、結局 &lt;code&gt;Makefile&lt;/code&gt; で最小限のビルドをするに留めた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;.PHONY: prepare build zip clean
all: prepare build zip clean

prepare:
	mkdir nd_darwin_amd64

build:
	env GOOS=darwin GOARCH=amd64 go build -ldflags=&amp;quot;-X main.version=$(shell gov)&amp;quot; -o nd_darwin_amd64/nd

zip:
	zip nd_darwin_amd64.zip -r nd_darwin_amd64

clean:
	rm -rf nd_darwin_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nd-のインストールと使い方&#34;&gt;nd のインストールと使い方&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# nd をインストールする
$ go get github.com/1000ch/nd

# $HOME/.nd/bin にパスを通す
export PATH=$HOME/.nd/bin:$PATH

# 対象の Node.js をインストールする
$ nd install &amp;lt;version&amp;gt;

# 対象の Node.js をアンインストールする
$ nd uninstall &amp;lt;version&amp;gt;

# 対象の Node.js を有効化する
$ nd use &amp;lt;version&amp;gt;

# インストールされている Node.js を表示する
$ nd list
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;バージョニングについて&#34;&gt;バージョニングについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ysugimoto/gov&#34;&gt;ysugimoto/gov&lt;/a&gt; というツールで管理している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gov init&lt;/code&gt; を実行すると &lt;code&gt;.versions&lt;/code&gt; という管理ファイルが生成される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gov patch|minor|major&lt;/code&gt; を実行するとバージョンが上がり &lt;code&gt;git&lt;/code&gt; のタグが作られる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gov&lt;/code&gt; を実行すると最新バージョンを出力する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という、 &lt;code&gt;npm&lt;/code&gt; と同じような機能を持っている。これを使って &lt;code&gt;gov&lt;/code&gt; で出力されるバージョンを &lt;code&gt;-ldflags=&amp;quot;-X main.version=$(shell gov)&amp;quot;&lt;/code&gt; という形でビルド時に埋め込んでいる。&lt;/p&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/21909&#34;&gt;proposal: spec: Default / Optional function parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kamijin_fanta/items/f66724091b699ee71b08&#34;&gt;Goのpathとfilepathでは動作が異なる　Windowsでも正しくパスを扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20161202095532.htm&#34;&gt;Big Sky :: バイナリ一つで zip, tar.gz, tar.bz2, tar.xz が開けるコマンド「archiver」(と go1.8 への対応方法)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20170622160723.htm&#34;&gt;Big Sky :: ダウンロードの進捗プログレスバー実装は可能か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/ghr&#34;&gt;tcnksm/ghr - Upload multiple artifacts to GitHub Release in parallel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Jxck_/items/02185f51162e92759ebe&#34;&gt;Go のクロスコンパイル環境構築&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tenntenn/items/7c70e3451ac783999b4f&#34;&gt;init関数のふしぎ #golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>技術書典5にサークル参加した</title>
      <link>https://1000ch.net/posts/2018/techbookfest-vol5.html</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/techbookfest-vol5.html</guid>
      <description>

&lt;h1 id=&#34;技術書典5にサークル参加した&#34;&gt;技術書典5にサークル参加した&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.net/posts/2018/techbookfest-vol4.html&#34;&gt;技術書典4に参加した&lt;/a&gt;時に触発されて、&lt;a href=&#34;https://twitter.com/1000ch/status/987913586365222912&#34;&gt;技術書典5は出店しようと決意していた&lt;/a&gt;が、宣言通り技術書典5にサークル参加してきた。サークル参加は共同参加と単独参加の2つで挑み、当日まで色々と苦労しながら、また当日も色々と大変だったが、無事に終えることができた。&lt;/p&gt;

&lt;h2 id=&#34;馬クラッカー-う18&#34;&gt;馬クラッカー（う18）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf05/circle/41010006&#34;&gt;馬クラッカー&lt;/a&gt;は共同参加のサークルで、開発に関するエモい話を集めた Fictions という本を仕上げた。主に &lt;a href=&#34;https://twitter.com/_kaelaela&#34;&gt;@_kaelaela&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/morishitter_&#34;&gt;@morishitter_&lt;/a&gt; が本文を書いて、私は主に進行管理や校正などの編集を担当した。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;こちらは開発に関する色んなポエムを集めた Fictions という本です。&lt;a href=&#34;https://twitter.com/_kaelaela?ref_src=twsrc%5Etfw&#34;&gt;@_kaelaela&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/morishitter_?ref_src=twsrc%5Etfw&#34;&gt;@morishitter_&lt;/a&gt;  と書きました（私は主に編集を担当）📖 &lt;a href=&#34;https://t.co/ckCu9uXBEU&#34;&gt;https://t.co/ckCu9uXBEU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵【技術書典5 け45・う18】 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1046001063961059328?ref_src=twsrc%5Etfw&#34;&gt;2018年9月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;こちらは2人にプレッシャーをかけつつ、入稿作業まで速やかに進んだので、印刷費も通常の 20% オフで済んだ。当日は単独参加のサークルの切り盛りに追われていたので、こちらには物理的に顔を出せなかったが、頒布物を一部販売したりした。&lt;/p&gt;

&lt;p&gt;物理版と併せて電子版（&lt;code&gt;.epub&lt;/code&gt;）も準備してあるので、買い損ねた人や興味がある人は以下から購入してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.booth.pm/items/1027491&#34;&gt;Fictions - 1000ch - BOOTH（同人誌通販・ダウンロード）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gumroad.com/products/UhnSb&#34;&gt;Gumroad - Fictions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;伝説のコンポーネント-け45&#34;&gt;伝説のコンポーネント（け45）&lt;/h2&gt;

&lt;p&gt;馬クラッカーの作業を進めているうちに、自分も何か一冊書いてみたくなり、衝動的にサークル参加を申し込んだ。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;もう一つは、Web Components に関することを網羅的に書いた「よくわかる Web Components」です。 &lt;a href=&#34;https://t.co/tIVz8XKQ80&#34;&gt;https://t.co/tIVz8XKQ80&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵【技術書典5 け45・う18】 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1046002166849142784?ref_src=twsrc%5Etfw&#34;&gt;2018年9月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;内容は色々と候補があったが、悩んだ挙げ句 Web Components に着地した（以下、まえがきから引用）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Componentsという言葉を2013年末に初めて目にして以来、かれこれ5年が経ちます。Web ComponentsがWebのスコープ問題を根本的に解決しうる技術だと感じて以来、継続的に動向をキャッチアップしてはアウトプットを繰り返してきたように思います。
こうして蓄積してきた経験と知識を、いつか何らかの形でまとめたいなと、常々思ってきました。このような背景を踏まえて、今回は書籍という形でまとめ、出版させて頂くに至りました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こちらは完売してしまっており再印刷は今の所予定していませんが、同じく電子版（&lt;code&gt;.epub&lt;/code&gt;）の用意があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.booth.pm/items/1027807&#34;&gt;よくわかる Web Components - 1000ch - BOOTH（同人誌通販・ダウンロード）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gumroad.com/l/PoTDY&#34;&gt;Gumroad - よくわかる Web Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;当日までの色々&#34;&gt;当日までの色々&lt;/h2&gt;

&lt;p&gt;執筆は &lt;a href=&#34;https://github.com/kmuto/review&#34;&gt;Re:VIEW&lt;/a&gt; フォーマットで進めた。ビルド環境をスクラッチでセットアップは中々骨が折れるので、まずは TechBooster チームが公開している &lt;a href=&#34;https://github.com/TechBooster/C89-FirstStepReVIEW-v2&#34;&gt;TechBooster/C89-FirstStepReVIEW-v2&lt;/a&gt; をベースにすると良い。Re:VIEW の文法は公式の &lt;a href=&#34;https://github.com/kmuto/review/blob/master/doc/format.ja.md&#34;&gt;Re:VIEW フォーマットガイド&lt;/a&gt;や &lt;a href=&#34;https://gist.github.com/erukiti/c4e3189dda179a0f0b73299fb5787838&#34;&gt;Re:VIEWチートシート&lt;/a&gt;あたりを参考にすれば直ぐに慣れる。が、出力結果を調整するためには &lt;a href=&#34;https://ja.wikipedia.org/wiki/LaTeX&#34;&gt;LaTeX&lt;/a&gt; と向き合う必要があるので、最初は根気が必要である。&lt;/p&gt;

&lt;p&gt;印刷所は、技術書典5のバックアップ印刷所でもあり、過去実績のある&lt;a href=&#34;http://www.nikko-pc.com/index/top.html&#34;&gt;日光企画&lt;/a&gt;へ2冊とも入稿した。印刷に関する用語がわからず、色々と調べながらだったが、どのオプションがどういうものかを把握できれば、複雑ではあるもののそこまで難しいものではない。入稿データについての確認は適時を日光企画側から電話を頂いて、細やかにフォローがあって助かったし勉強になった。一方で入稿フォームはかなり複雑で辛かったので、ワークフローや Web サイトを色々と直したくなる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special thanks to &lt;a href=&#34;https://twitter.com/vvakame&#34;&gt;@vvakame&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mhidaka&#34;&gt;@mhidaka&lt;/a&gt;, Y.K-san!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;当日の色々&#34;&gt;当日の色々&lt;/h2&gt;

&lt;p&gt;入稿作業で燃え尽きてしまったので、あまり思考せずに当日を迎えてしまった。こってこてに準備せずとも売る本さえあれば何とかなるが、他のサークルを見渡しているとかなり入念に準備をしていて感心した。なので、準備するに越したことはない。会場入りする前に百均で買い出ししたが、百均は偉大である…。&lt;/p&gt;

&lt;p&gt;当日は一人で切り盛りしたので、色々大変だったし、心細い。ご飯は知り合いが買ってきてくれたが、食べながら接客はできないので、結局食べずに最後まで過ごしてしまった。あと、知り合いが遊びに来てくれて大変ありがたい中、自分がその場を動けないので遊びに行ったり他のサークルを見て回れないという事態になってしまった。楽しかったけど、そこは勿体なかったな、と。&lt;/p&gt;

&lt;h3 id=&#34;用意したもの&#34;&gt;用意したもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;スケッチブックと油性マジック&lt;/strong&gt;: 値段なりサークルの名前なり、何らかの掲示をするために必要かと思い準備した。使い切りはしなかったが、準備して助かった。たとえ事前準備が入念だったとしてもお守りとして持っておくと良い気がする&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;お金のトレー&lt;/strong&gt;: なんとなく買ってみたが、お釣りを減らす工夫を価格設定でしたこともあり、さほど活躍の機会はなかった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビニールのポーチ&lt;/strong&gt;: お札を保管しておくために必須&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プラスチックのコインケース&lt;/strong&gt;: お釣りをすぐ出せるように500円を並べておく。用意してよかった&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;次は用意するもの&#34;&gt;次は用意するもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;棒金&lt;/strong&gt;: お釣りが足りなくなる事態にはならなかったものの、超充分には用意していなかった。お釣りがなくなる不安と戦うことになるので、あるに越したことはない&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;布&lt;/strong&gt;: テーブルに敷く。商品は画用紙の上に置いたので、直にテーブルではなかったものの、敷くことでサークルのエリアがどこまでかを主張できそう&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ポスター&lt;/strong&gt;: サークル名、タイトル、概要、価格、販売形態、電子版の販売 URL など、頒布物の概要がひと目でわかるものを掲示すべきだった。タッチポイントの増減にかなり影響する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;電子決済できる何か&lt;/strong&gt;: かんたん後払いシステムなのか、Kyash なのかは要検討&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;その他所感&#34;&gt;その他所感&lt;/h2&gt;

&lt;p&gt;前回の技術書典4ですらとんでもない規模だと思ったが、今回の技術書典5は倍の来場者述べ10000人という規模のイベントに成長している。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;これにて &lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#技術書典&lt;/a&gt; 閉会します。ご来場、誠にありがとうございました。総来場者数は のべ10341人、うちサークル・スタッフ等関係者は889人でした。&lt;/p&gt;&amp;mdash; 技術書典公式アカウント (@techbookfest) &lt;a href=&#34;https://twitter.com/techbookfest/status/1049208448372465664?ref_src=twsrc%5Etfw&#34;&gt;2018年10月8日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;技術者が日頃のインプットからアウトプットを生み出し、アウトプットが誰かのインプットになり、イベントにまつわる様々なところで周辺の経済が回り、色んな交流が生まれていることが素晴らしい。また、イベント運営の大変さは多少なりともわかっている身として、この大規模イベントを年2回のペースで運営し続けているのが凄まじい。&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#技術書典&lt;/a&gt; 運営スタッフの皆さん、サークル参加の皆さん、来場者の皆さん、ありがとうございました＆お疲れ様でした♨&lt;/p&gt;&amp;mdash; Shogo 🍵【技術書典5 け45・う18】 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1049246627997708288?ref_src=twsrc%5Etfw&#34;&gt;2018年10月8日&lt;/a&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>次世代 Web カンファレンスに出演します</title>
      <link>https://1000ch.net/posts/2018/next-web-conf-2019.html</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2018/next-web-conf-2019.html</guid>
      <description>

&lt;h1 id=&#34;次世代-web-カンファレンスに出演します&#34;&gt;次世代 Web カンファレンスに出演します&lt;/h1&gt;

&lt;p&gt;来たる &lt;strong&gt;2019年1月13日(日)&lt;/strong&gt; に開催される &lt;strong&gt;次世代 Web カンファレンス&lt;/strong&gt; に出演します。前回が2015年なので、4年に1度の開催ということで、オリンピックみたいですね（もちろん、そんな意図はないと思う）。&lt;/p&gt;

&lt;p&gt;担当が Performance (&lt;code&gt;#nwc_perf&lt;/code&gt;) のセッションオーナーということで一応まとめ役を兼ねていますが、いちスピーカーとして、これからの Web パフォーマンスについて色々と議論できればと思います。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/nwc_perf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#nwc_perf&lt;/a&gt; です、宜しくお願いします！ / &amp;quot;次世代 Web カンファレンス - connpass&amp;quot; &lt;a href=&#34;https://t.co/91RqP6XORw&#34;&gt;https://t.co/91RqP6XORw&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/nwc_all?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#nwc_all&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shogo 🍵【技術書典5 け45・う18】 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/1046751535827365888?ref_src=twsrc%5Etfw&#34;&gt;2018年10月1日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://webperf.guide&#34;&gt;#超速本&lt;/a&gt;を世に送り出してから早一年が経とうとしており、Web パフォーマンスを取り巻く要素も増えつつあります。本番では議論がコンテンツなので頭出しはしませんが、触れたいトピックは色々とあるので、今から温めておこうと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>